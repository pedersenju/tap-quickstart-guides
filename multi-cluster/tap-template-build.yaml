#@ load("@ytt:data", "data")
#@ load("@ytt:base64","base64")
---
profile: build

#! installed_for_vmware_internal_use: "true"
ceip_policy_disclosed: true

shared:
  ingress_domain: #@ data.values.tap.domains.main
  #! Uncomment the line below if you wish to supply your own ClusterIssuer
  #! ingress_issuer: #@ data.values.tap.cluster.issuerRef.name

buildservice:
  kp_default_repository: #@ "{}/{}".format(data.values.tap.credentials.registry.host, data.values.tap.registry.repositories.buildService)
  #@ if data.values.tap.registry.type == "ecr":
  kp_default_repository_aws_iam_role_arn: #@  data.values.tap.credentials.registry.aws_iam_role_arn
  #@ else:
  kp_default_repository_username: #@ data.values.tap.credentials.registry.username
  kp_default_repository_password: #@ base64.decode(data.values.tap.credentials.registry.password).rstrip()
  #@ end

  #! stack_configuration: #@ data.values.tap.stack_configuration

#! supply_chain can be configured to be either [ basic, testing_scanning ]
supply_chain: basic

ootb_supply_chain_basic:
  #! cluster_builder: #@ data.values.tap.supply_chain.cluster_builder
  registry:
    server: #@ data.values.tap.credentials.registry.host
    repository: #@ data.values.tap.registry.repositories.ootbSupplyChain
  #@ if data.values.tap.supply_chain.gitops.enabled == "true":
  external_delivery: true
  gitops:
    ssh_secret: #@ data.values.tap.supply_chain.gitops.ssh_secret
    repository_owner: #@ data.values.tap.supply_chain.gitops.repository.owner
    repository_name: #@ data.values.tap.supply_chain.gitops.repository.name
    server_address: #@ "https://{}/".format(data.values.tap.supply_chain.gitops.provider)
    branch:  #@ data.values.tap.supply_chain.gitops.repository.branch
    commit_strategy: pull_request
    pull_request:
      server_kind: github
      commit_branch: ""
      pull_request_body: "Generated by TAP Basic Supply Chain"
  #@ end
  git_implementation: #@ data.values.tap.supply_chain.git_implementation

ootb_supply_chain_testing_scanning:
  #! cluster_builder: #@ data.values.tap.supply_chain.cluster_builder
  registry:
    server: #@ data.values.tap.credentials.registry.host
    repository: #@ data.values.tap.registry.repositories.ootbSupplyChain
  #@ if data.values.tap.supply_chain.gitops.enabled == "true":
  external_delivery: true
  gitops:
    ssh_secret: #@ data.values.tap.supply_chain.gitops.ssh_secret
    repository_owner: #@ data.values.tap.supply_chain.gitops.repository.owner
    repository_name: #@ data.values.tap.supply_chain.gitops.repository.name
    server_address: #@ "https://{}/".format(data.values.tap.supply_chain.gitops.provider)
    branch:  #@ data.values.tap.supply_chain.gitops.repository.branch
    commit_strategy: pull_request
    pull_request:
      server_kind: github
      commit_branch: ""
      pull_request_body: "Generated by TAP Testing and Scanning Supply Chain"
  #@ end
  git_implementation: #@ data.values.tap.supply_chain.git_implementation

#@ if data.values.tap.registry.type == "ecr":
ootb_templates:
  iaas_auth: true
#@ end

scanning:
  metadataStore:
    url: ""
grype:
  namespace: #@ data.values.tap.devNamespace
  targetImagePullSecret: "container-registry-credentials"
  targetSourceSshSecret: #@ data.values.tap.supply_chain.gitops.ssh_secret
  metadataStore:
    url: #@ "{}.{}".format("https://metadata-store", data.values.tap.domains.view)
    caSecret:
      name: store-ca-cert
      importFromNamespace: metadata-store-secrets
    authSecret:
      name: store-auth-token
      importFromNamespace: metadata-store-secrets

image_policy_webhook:
  allow_unmatched_images: true