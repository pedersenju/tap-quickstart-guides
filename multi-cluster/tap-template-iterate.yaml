#@ load("@ytt:data", "data")
---
profile: iterate

#! installed_for_vmware_internal_use: "true"
ceip_policy_disclosed: true

shared:
  ingress_domain: #@ data.values.tap.domains.main
  #! Uncomment the line below if you wish to supply your own ClusterIssuer
  #! ingress_issuer: #@ data.values.tap.cluster.issuerRef.name

buildservice:
  kp_default_repository: #@ "{}/{}".format(data.values.tap.credentials.registry.host, data.values.tap.registry.repositories.buildService)
  kp_default_repository_username: #@ data.values.tap.credentials.registry.username
  kp_default_repository_password: #@ base64.decode(data.values.tap.credentials.registry.password).rstrip()
  exclude_dependencies: true
  stack_configuration: #@ data.values.tap.stack_configuration

#! supply_chain is pinned to basic as we want fast feedback in inner loop development
supply_chain: basic

ootb_supply_chain_basic:
  #! cluster_builder: full
  registry:
    server: #@ data.values.tap.credentials.registry.host
    repository: #@ data.values.tap.registry.repositories.ootbSupplyChain
  gitops:
    ssh_secret: #@ data.values.tap.supply_chain.gitops.ssh_secret

scanning:
  metadataStore:
    url: ""

metadata_store:
  ns_for_export_app_cert: #@ data.values.tap.devNamespace
  app_service_type: ClusterIP

image_policy_webhook:
  allow_unmatched_tags: true

contour:
  envoy:
    service:
      type: LoadBalancer

cnrs:
  default_tls_secret: #@ "{}/{}".format(data.values.tap.ingress.contour_tls_namespace, data.values.tap.ingress.contour_tls_secret)
  domain_name: #@ data.values.tap.domains.knative
  domain_template: "{{.Name}}-{{.Namespace}}.{{.Domain}}"
  ingress:
    internal:
      namespace: tanzu-system-ingress
    external:
      namespace: tanzu-system-ingress

appliveview_connector:
  backend:
    sslDisabled: false
    ingressEnabled: true
    host: #@ "appliveview.{}".format(data.values.tap.domains.main)
